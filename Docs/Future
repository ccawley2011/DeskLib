   ____            _    _     _ _
  |  _ \  ___  ___| | _| |   (_) |__
  | | | |/ _ \/ __| |/ / |   | | '_ \
  | |_| |  __/\__ \   <| |___| | |_) |
  |____/ \___||___/_|\_\_____|_|_.__/
  The general-purpose freeware C library for RISC OS

Plans for the future
--------------------

There are several things which are planned for a future DeskLib release.  If you want to write code for something suggested below, then check with the moderator before writing it so we don't get duplicated effort.

 * Nested Wimp: We could really do with a simple way to handle the Nested Wimp's new features.  The code for this would fit well into a new DeskLib module like the Pane handling.

 * Resources system: Resource handling is somewhat primitive, and could be updated to deal with country-specific resources.

 * Debug version: It'd be nice to have a 'Debug' version of DeskLib, which would be compiled with 'DeskLib_DEBUG' predefined. The .o files for this would be in a 'Debug' directory within each sublibrary directory. This would use variables like 'event_debuglevel' to control how much diagnostic information is output (using DebugX_Printf()). Calls to 'DebugX_Printf()' would have to be added to the libraries to make this worthwhile.

 * Improved error handling: Maybe there should be a global function-pointer 'desklib_errorfn' which, if set, is called by all library functions if an error occurs.  Possibly there should be various levels of error, some serious, others warnings.  This could eliminate the need for user code to check the returned 'os_error *' from many library functions.  There could also be a global structure which contains information about the error, or that information could be passed to the relevant error-handling functions.

 * Unified memory management: Maybe have a set of function prototypes, such as "dl_malloc/realloc/free" or similar which could be used throughout the library, where more advanced control isn't needed.  There would then be a way to override the defaults via function pointers, I'd've thought.  This could save some memory management headaches.  Similarly, there could be a set of "neutral" functions which handle more advanced memory management, such as extending a block of memory in the middle, so the user could make all of DeskLib use the same memory management routines.

 * RISC OS version handling: Have a macro RISC_OS_VERSION which can be set by the user, which enables different versions of functions.  This will allow programs to be compiled to run on specific versions of RISC OS.  This seems pretty pointless now we no longer support RISC OS 2.

--
The DeskLib team
http://www.riscos.info/desklib/
