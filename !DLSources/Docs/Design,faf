<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html><head>
<meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>DeskLib Source Documentation</title>
<link rel="stylesheet" type="text/css" href="styles">
</head>
<body>

<table>
<tr>
<td colspan="2">
<h1 style="padding-top: 3mm; padding-bottom: 3mm; margin-top: 0; margin-bottom: 0;">DeskLib Source Documentation</h1>
</td></tr>
<tr valign="top"><td>
<table style="margin-left:3mm;">
<tr>                 <td class="menu"><h3><a href="Introduction">Introduction</a></h3></td></tr>
<tr class="maintext"><td class="menu"><h3 class="menu">Module<br>Design</h3></td></tr>
<tr>                 <td class="menu"><h3><a href="Naming">Naming<br>Conventions</a></h3></td></tr>
<tr>                 <td class="menu"><h3><a href="Structures">Structures<br>&amp; Types</a></h3>          </td></tr>
<tr>                 <td class="menu"><h3><a href="Licensing">Licensing<br>&amp; Copyright</a></h3>          </td></tr>
</table>
</td>
<td class="maintext" style="padding:5mm;">
<h2 style="margin-top: 0;">Module Design</h2>

<p>The functionality of DeskLib should generally be split by functional
lines, to provide useful, self contained modules. The content of modules
shouldn't normally be determined solely by a range of SWIs, for example.
(The WimpSWIs module is an obvious exception - but, in general, users will
be using the other modules in the library in preference to accessing the
SWI wrappers in that module.)</p>

<p>For each .c file, there should be a .h file of the same name prototyping
all external function and variable names, plus any constants that should
be used in data passed in to those functions. This .h file will go into
the main .h directory in !DeskLib.</p>
<p>An additional .h file (generally &lt;name&gt;defs.h or similar) can be used for
internal constant and structure definitions. This usually goes in the .h
directory local to a sublibrary directory.
<br>e.g. &quot;Template&quot; has a &quot;Template.h&quot; file detailing the externally visible
functions, variables, and structures/types. It also has an internal header
file (Template.h.TempDefs - TempDefs.h) which defines internal-use-only
definitions.</p>

<p>Every header file should guard against multiple-inclusion and be usable with C++ by using the
following format:</p>
<code>#ifndef __dl_&lt;filename&gt;_h
<br>#define __dl_&lt;filename&gt;_h</code>

<br>... insert your #includes here ...

<br><code>#ifdef __cplusplus
<br>extern &quot;C&quot; {
<br>#endif</code>
 <br>... insert your .h code in here ...

<br><code>#ifdef __cplusplus
<br>extern &quot;C&quot; {
<br>#endif

<br>#endif</code>


<p>Ideally error messages generated by DeskLib should be internationalisable,
though there's currently no structure in place to provide this.</p>

<p>All code should be robust to misuse - for instance, functions should check the
validity of parameters passed to them and not use obviously junk data.
For example, in any situation where a function-pointer is supplied, you
should check if it is NULL, and not try to call it if it is! (Even if
this renders the effect of your routine down to nothing whatsoever)
Anywhere that you return values to a variable passed by reference
( e.g. <code>ReturnAnInteger(&amp;integer_variable);</code>)
if the variable pointer passed in is NULL, then that return-value should
be ignored if possible. (checking if something == 0 usually takes only
one instruction, so very little efficiency is lost due to this, but it is
VERY useful if you don't want all the return values)</p>

<p>For example, in the icon-handling code, it always checks that icons are of the right
types for things to be done to them... For example, an attempt to set the
text in any icon will not fail, even if the icon was not a text icon or
an indirected text icon. An attempt to place the caret in an icon will
not always succeed, but no errors or problems should be caused by
allowing the caret to be placed in &quot;illegal&quot; places such as non-writeable
icons...</p>

<p>Code should be designed in as generic a manner as possible. For
example, if you write code that automatically malloc's space for a
window's indirected data, then include a function that can be called to
free the memory when necessary. (And possibly also include a call to this
code in the Window_Delete() function). Note that this should be a seperate
function, so that programmers using the libraries can call it themselves
if they want to do things slightly differently to the way it was orignally envisaged.</p>

<p>Finally, code should be split up into the smallest reasonable
segments so that a minimum of code is included if the user only calls one
function. This means each module directory will contain many separate files.</p>

<h3>File Header</h3>
<p>All new DeskLib files should <a href="Header">use this</a> as a template for the file header.</p>

</td></tr>
</table>
</body>
</html>